# app/handlers/case_training.py
from app.adapters.yandex_gpt import gpt_evaluate
from app.utils.case_state import get_user_case_session
from app.adapters.telegram import send_message, send_keyboard
import json, re

def _extract_json_block(text: str) -> str | None:
    # –≤—ã—Ä–µ–∑–∞–µ–º ```json ... ``` –∏ –∏—â–µ–º –ø–µ—Ä–≤—ã–π {...}
    t = text.strip()
    t = re.sub(r"^```(?:json)?\s*|\s*```$", "", t, flags=re.IGNORECASE)
    m = re.search(r"\{.*\}", t, flags=re.S)
    return m.group(0) if m else None

def parse_score_feedback(raw: str):
    try:
        payload = _extract_json_block(raw) or raw
        data = json.loads(payload)
        return data.get("score"), data.get("comment", "")
    except Exception:
        # –Ω–µ –≤–∞–ª–∏–¥–Ω—ã–π JSON ‚Äî –Ω–µ –±–ª–æ–∫–∏—Ä—É–µ–º —Ç—Ä–µ–Ω–∞–∂—ë—Ä
        return None, raw.strip()

def _local_keywords_eval(step, text: str):
    kw = [k.lower() for k in step.get("expected_keywords", [])]
    found = [k for k in kw if k in (text or "").lower()]
    return len(found), f"–ù–∞–π–¥–µ–Ω–æ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤: {len(found)} –∏–∑ {len(kw)} ({', '.join(found)})"

def handle_case_voice(chat_id: int, file_id: str):
    try:
        session = get_user_case_session(chat_id)
        if not session:
            send_message(chat_id, "‚ùóÔ∏è–°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ù–∞–∂–º–∏—Ç–µ ¬´–ù–∞—á–∞—Ç—å —Ç—Ä–µ–Ω–∞–∂—ë—Ä¬ª.")
            return
        from app.handlers.voice import stt_to_text
        user_answer_text = stt_to_text(file_id)

        step = session.get_current_step()
        if step is None:
            send_message(chat_id, "‚ö†Ô∏è –¢—Ä–µ–Ω–∞–∂—ë—Ä —É–∂–µ –∑–∞–≤–µ—Ä—à—ë–Ω! –ù–∞–∂–º–∏—Ç–µ ¬´–ù–∞—á–∞—Ç—å —Ç—Ä–µ–Ω–∞–∂—ë—Ä¬ª –¥–ª—è –Ω–æ–≤–æ–≥–æ –∑–∞–ø—É—Å–∫–∞.")
            return

        eval_type = step.get('evaluation')

        # –ª–æ–∫–∞–ª—å–Ω—ã–µ —Ä–µ–∂–∏–º—ã, —á—Ç–æ–±—ã –Ω–µ –∑–∞–≤–∏—Å–µ—Ç—å –æ—Ç GPT
        if eval_type == "manual":
            score, feedback = 1, "–û—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω."
        elif eval_type == "keywords":
            score, feedback = _local_keywords_eval(step, user_answer_text)
        else:
            crit = session.criteria[eval_type]
            raw = gpt_evaluate(
                text=user_answer_text,
                prompt=crit['prompt'],
                scale=crit['scale'],
                feedback=crit.get('feedback', True)
            )
            score, feedback = parse_score_feedback(raw)

        session.save_result(step['id'], user_answer_text, score, feedback)
        nxt = session.next_step()
        if nxt:
            send_message(chat_id, f"–û—Ü–µ–Ω–∫–∞: {score if score is not None else '-'}\n–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {feedback}\n\n–°–ª–µ–¥—É—é—â–∏–π —à–∞–≥:\nüìù {nxt['question']}")
        else:
            send_message(chat_id, "üëç –í—Å–µ —ç—Ç–∞–ø—ã –ø—Ä–æ–π–¥–µ–Ω—ã! –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –æ—Ç—á—ë—Ç.")
            send_keyboard(chat_id, [["–ó–∞–≤–µ—Ä—à–∏—Ç—å —Ç—Ä–µ–Ω–∞–∂—ë—Ä"]])
    except Exception as e:
        send_message(chat_id, f"‚ùóÔ∏è–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≥–æ–ª–æ—Å–∞: {e}")

def handle_case_text(chat_id: int, text: str):
    try:
        session = get_user_case_session(chat_id)
        if not session:
            send_message(chat_id, "‚ùóÔ∏è–°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ù–∞–∂–º–∏—Ç–µ ¬´–ù–∞—á–∞—Ç—å —Ç—Ä–µ–Ω–∞–∂—ë—Ä¬ª.")
            return

        step = session.get_current_step()
        if step is None:
            send_message(chat_id, "‚ö†Ô∏è –¢—Ä–µ–Ω–∞–∂—ë—Ä —É–∂–µ –∑–∞–≤–µ—Ä—à—ë–Ω! –ù–∞–∂–º–∏—Ç–µ ¬´–ù–∞—á–∞—Ç—å —Ç—Ä–µ–Ω–∞–∂—ë—Ä¬ª.")
            return

        eval_type = step.get('evaluation')

        if eval_type == "manual":
            score, feedback = 1, "–û—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω."
        elif eval_type == "keywords":
            score, feedback = _local_keywords_eval(step, text)
        else:
            crit = session.criteria[eval_type]
            raw = gpt_evaluate(
                text=text,
                prompt=crit['prompt'],
                scale=crit['scale'],
                feedback=crit.get('feedback', True)
            )
            score, feedback = parse_score_feedback(raw)

        session.save_result(step['id'], text, score, feedback)
        nxt = session.next_step()
        if nxt:
            send_message(chat_id, f"–û—Ü–µ–Ω–∫–∞: {score if score is not None else '-'}\n–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {feedback}\n\n–°–ª–µ–¥—É—é—â–∏–π —à–∞–≥:\nüìù {nxt['question']}")
        else:
            send_message(chat_id, "üëç –í—Å–µ —ç—Ç–∞–ø—ã –ø—Ä–æ–π–¥–µ–Ω—ã! –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –æ—Ç—á—ë—Ç.")
            send_keyboard(chat_id, [["–ó–∞–≤–µ—Ä—à–∏—Ç—å —Ç—Ä–µ–Ω–∞–∂—ë—Ä"]])
    except Exception as e:
        send_message(chat_id, f"‚ùóÔ∏è–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–∫—Å—Ç–∞: {e}")

def finish_case(chat_id: int):
    try:
        session = get_user_case_session(chat_id)
        if not session:
            send_message(chat_id, "‚ùóÔ∏è–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–∏ —Ç—Ä–µ–Ω–∞–∂—ë—Ä–∞.")
            return

        pdf_path = f"/tmp/{chat_id}_report.pdf"

        # –æ–±—â–∏–π summary –ø—Ä–æ—Å–∏–º —É –º–æ–¥–µ–ª–∏, –Ω–æ —ç—Ç–æ –Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–æ
        all_answers = "\n".join([str(r.get('answer','')) for r in session.results if r.get('answer')])
        summary = None
        try:
            summary = gpt_evaluate(
                text=all_answers,
                prompt="–°—Ñ–æ—Ä–º–∏—Ä—É–π –∫–æ—Ä–æ—Ç–∫–∏–π —Ä–∞–∑–±–æ—Ä –ø–æ –≤—Å–µ–º—É —Ç—Ä–µ–Ω–∞–∂—ë—Ä—É (—Å–∏–ª—å–Ω—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã, –∑–æ–Ω—ã —Ä–æ—Å—Ç–∞, —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏). –í–µ—Ä–Ω–∏ 100‚Äì200 —Å–ª–æ–≤.",
                scale=(1,1),
                feedback=True
            )
        except Exception:
            summary = None

        session.export_pdf(pdf_path, summary=summary)
        from app.adapters.telegram import send_document
        send_document(chat_id, pdf_path, caption="–í–∞—à –æ—Ç—á—ë—Ç –ø–æ —Ç—Ä–µ–Ω–∞–∂—ë—Ä—É!")
        send_message(chat_id, "üéâ –¢—Ä–µ–Ω–∞–∂—ë—Ä –∑–∞–≤–µ—Ä—à—ë–Ω! –û—Ç—á—ë—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.")
        # —Ç—É—Ç –∂–µ –º–æ–∂–Ω–æ –æ–±–Ω—É–ª—è—Ç—å —Å–µ—Å—Å–∏—é, –µ—Å–ª–∏ —Ö–æ—á–µ—à—å
        from app.utils.case_state import set_user_case_session
        set_user_case_session(chat_id, None)
    except Exception as e:
        send_message(chat_id, f"‚ùóÔ∏è–û—à–∏–±–∫–∞ –≤ finish_case: {e}")
